//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirstSecondPass<R,A> extends GJDepthFirst<R,A> {
   public class E{
      int tNumber;
      int lNumber;
      String type;
      boolean isTemp;
      E(){
         isTemp = true;
         tNumber = 0;
         lNumber = 0;
         type = null;
      }
   }

   int i;
   int label;
   HashMap<String, Integer> lVariables = new HashMap <String, Integer>();
   String class_name;
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }
   
 public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //
     

   public void typeError(){
      return;// disable type checking
   }

   public String findType(String id, Table a){
    if(a==null){
       typeError();
    }
    if(a.var.get(id)!=null)
        return a.var.get(id);
    if(a.level == 2){
       Table classTable = symbolTable.get(a.parent);
       if(classTable == null || classTable.methodParam == null){
          typeError();
       }
       return findType(id, classTable.methodParam.get(a.name));
    }
    else{
       return findType(id, symbolTable.get(a.parent));
    }
    }

   public void compare(LinkedList<R> instance, LinkedList<R> record){
      int i;
      int sz=record.size();
      boolean flag;
      if(instance==null){
        if(sz!=1){
           
        typeError();
        }
      }
      if(sz!=instance.size()+1){
        
        typeError();
        }
      for(i=1;i<sz;i++){
        flag = false;
        String a = (String) record.get(i);
        String b = (String) instance.get(i-1);
        if(a.equals(b)){ // same type
           continue;
        }
        Table x=symbolTable.get(b);
        while(x!=null){ // check if a is a parent of b
            if(a.equals(x.parent)){
               flag = true;
               break;
            }
            x=symbolTable.get(x.parent);
         }
         if(!flag){ // if not then error
            typeError();
         }
      }
   }

   public String findRet(Table symTable, String a,LinkedList<R> instance){
    if(symTable==null){
        typeError();
    }
   
    if(symTable.signature.get(a)==null){
        if(symTable.parent==null){
             typeError();
        }
        return findRet(symbolTable.get(symTable.parent), a, instance);
      }
      // signature found, comparing with params
       LinkedList<R> record =symTable.signature.get(a);
       if(instance==null && record.size()==1){
           return (String) record.get(0);
       }
       compare(instance, record);
      return (String)record.get(0);
    }

   public void checkOverloading(String mName, LinkedList<R> sign, Table argu){
      // it is ensured that there is no circular inheritance
      int sz;
      int i;
      if(argu==null || argu.parent==null){
         return;
      }
      Table x = symbolTable.get(argu.parent);
      LinkedList<R> bSign = x.signature.get(mName);
      if(bSign==null){
         checkOverloading(mName, sign, x);
      }
      else if(bSign.size()!=sign.size()){
         typeError();
      }
      else{
         sz = bSign.size();
         i = 0;
         while(i<sz){
            if(!(((String) bSign.get(i)).equals((String) sign.get(i)))){
               typeError();
            }
            i++;
         }
      }
   }


    int offsetGet(String classname, String var, boolean variable){
        if(classname==null)
            System.out.println("ERROR");
        Table a = symbolTable.get(classname);
        if(variable && a.var.get(var)!=null){
            return a.varOff.get(classname+"_"+var);
        }
        if((!variable) && a.methodBody.get(var)!=null){
           return a.methodOff.get(classname+"_"+var);
        }
        
        return offsetGet(a.parent,var, variable);
        }

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      label = 0;
      i = 0;

      R _ret=null;
      symbolTable = (HashMap<String, Table>) argu;
      argu = (A) null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {

      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      Table cTable = symbolTable.get(className);
      argu = (A)((cTable).methodBody.get((String)"main"));
      class_name = className;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      class_name = className;
      argu = (A) symbolTable.get(className);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      class_name = className;
      argu = (A)symbolTable.get(className);
      if(symbolTable.get(((Table)argu).parent)==null){ // base class does not exist
         typeError();
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);
      // ## push localVariable into the stack, along with i if varDeclaration is in method
      lVariables.put((String)_ret,i++);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String mName = (String) n.f2.accept(this, argu);
      String cName = (String) ((Table)argu).name;
      LinkedList<R> sign = ((Table)argu).signature.get(mName);
      checkOverloading(mName, sign, (Table)argu);
      argu = (A) ((Table)argu).methodBody.get(mName);

      i = 1;
      lVariables = new HashMap<String, Integer>();


      n.f3.accept(this, argu);
      LinkedList<R> paramList = (LinkedList<R>) n.f4.accept(this, argu); // formal parameter list
      if(paramList == null){
         paramList = new LinkedList<R>();
      }
      int j;
      for(j=0;j<paramList.size();j++){
         lVariables.put((String)paramList.get(j), i);
         i++;
      }


      System.out.println(cName+"_"+mName+"["+(paramList.size()+1)+"]");
      System.out.println(" BEGIN ");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      E ret = (E) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println(" RETURN TEMP "+ret.tNumber);
      System.out.println(" END ");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      R param = n.f0.accept(this, argu);
      R rest =  n.f1.accept(this, argu);
      if(rest == null){
         rest = (R) new LinkedList<R>();
      }
      if(param==null){
         return rest;
      }
      LinkedList<R> l = (LinkedList<R>) rest;
      l.addFirst(param);
      return (R) l;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      String _ret = (String) n.f0.accept(this, argu);
      if(n.f0.which==3){
         Set<String> classNames = symbolTable.keySet();
         for(String s: classNames){
            if(_ret.equals(s)){
               return (R) _ret;
            }
         }
      }
      return (R) _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

  /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String _ret = (String) "int[]";
      return (R) _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      n.f0.accept(this, argu);
      String _ret=(String) "boolean";
      return (R) _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      n.f0.accept(this, argu);
      String _ret = (String) "int";
      return (R) _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E e = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);


      if(lVariables.get(id)!=null){
         System.out.println(" MOVE TEMP "+ lVariables.get(id)+ " TEMP "+e.tNumber);
      }
      else{
         int off = offsetGet(class_name, id, true);
         System.out.println(" HSTORE TEMP 0 "+off+" TEMP "+e.tNumber);
      }
      return (R) id;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {

      int t1 = i++;
      int t2 = i++;
      int t3 = i++;
      int t4 = i++;
      int t5 = i++;
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E e2 = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      E e5 = (E) n.f5.accept(this, argu);
      n.f6.accept(this, argu);


      E e = new E();
      if(lVariables.get((String)_ret)!=null){
         int v = lVariables.get((String)_ret);
         e.tNumber = v;
         e.isTemp = true;
      }
      else{
         /* not present in local variables */
         int off = offsetGet(class_name, (String) _ret, true);
         int i1 = i++;
         System.out.println(" HLOAD TEMP "+ i1 + " TEMP 0 " + off);
         e.tNumber = i1;
         e.isTemp = true;
      }

      System.out.println(" MOVE TEMP "+t1+" TIMES 4 TEMP "+e2.tNumber);
      System.out.println(" MOVE TEMP "+t2+" PLUS 4 TEMP "+t1); // array offset in t2
      System.out.println(" MOVE TEMP "+t3+" TEMP "+e.tNumber); // array base address in t3
      System.out.println(" MOVE TEMP "+t4+" TEMP "+e5.tNumber); // value in t4
      System.out.println(" MOVE TEMP "+t5+" PLUS TEMP "+t3+" TEMP "+t2); // address at which value to be stored in t5
      System.out.println(" HSTORE TEMP "+t5+" 0 TEMP "+t4);


      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      int l1 = label++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(" CJUMP TEMP "+p2.tNumber+" L"+l1);
      n.f4.accept(this, argu);
      System.out.println(" L"+l1);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      int l1 = label++;
      int l2 = label++;
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      System.out.println(" CJUMP TEMP "+ p2.tNumber+" L"+l1);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+l2);
      n.f5.accept(this, argu);
      System.out.println(" L"+l1+" NOOP ");
      n.f6.accept(this, argu);
      System.out.println(" L"+l2+" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      int l1 = label++;
      int l2 = label++;
      System.out.println(" L"+l1+" NOOP");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E e1 = (E) n.f2.accept(this, argu);
      System.out.println(" CJUMP TEMP "+e1.tNumber+" L"+l2);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+l1);
      System.out.println(" L"+l2+" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E e1 = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" PRINT TEMP "+e1.tNumber);
      return _ret;
   }

   /**
    * f0 -> OrExpression()-
    *       | AndExpression()-
    *       | CompareExpression()-
    *       | neqExpression()-
    *       | PlusExpression()-
    *       | MinusExpression()-
    *       | TimesExpression()-
    *       | DivExpression()-
    *       | ArrayLookup()-
    *       | ArrayLength()-
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression() 
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int i1 = i++;
      System.out.println(" MOVE TEMP "+i1+" TIMES TEMP "+p1.tNumber + " TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "boolean";
      ret.tNumber = i1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int l2 = label++;
      int l3 = label++;
      int t1 = i++;

      System.out.println(" CJUMP TEMP "+p1.tNumber+" L"+l2);
      System.out.println(" MOVE TEMP "+t1+" TEMP "+p1.tNumber);
      System.out.println(" JUMP L"+l3);
      System.out.println(" L"+l2+" NOOP ");
      System.out.println(" MOVE TEMP "+t1+" TEMP "+p2.tNumber);
      System.out.println(" L"+l3+" NOOP ");

      E ret = new E();
      ret.type = "boolean";
      ret.tNumber = t1;
      return (R) ret; 
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" LE TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "boolean";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" NE TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "boolean";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" PLUS TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "int";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" MINUS TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "int";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" TIMES TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "int";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
       R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      int t1 = i++;
      System.out.println(" MOVE TEMP "+t1+" DIV TEMP "+p1.tNumber+" TEMP "+p2.tNumber);
      E ret = new E();
      ret.type = "int";
      ret.tNumber = t1;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      int i1 = i++;
      int i2 = i++;
      int i3 = i++;
      int i4 = i++;
      int t1 = i++;
      int t2 = i++;
      int t3 = i++;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p2 = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(" MOVE TEMP "+i1+" TEMP "+p1.tNumber);
      System.out.println(" MOVE TEMP "+i2+" TEMP "+p2.tNumber);
      System.out.println(" MOVE TEMP "+t1+" TIMES TEMP "+i2+" 4"); // ##C1
      System.out.println(" MOVE TEMP "+t2+" PLUS TEMP "+t1+" 4"); // ##C2
      System.out.println(" MOVE TEMP "+t3+" PLUS TEMP "+i1+ " TEMP "+t2); // ##C3
      System.out.println(" HLOAD TEMP "+i3+" TEMP "+t3+" 0 ");

      E ret = new E();
      ret.tNumber = i3;
      ret.type = "int";
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      E p1 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      int i1 = i++;
      int i2 = i++;
      System.out.println(" MOVE TEMP "+i1 + " TEMP "+p1.tNumber);
      System.out.println(" HLOAD TEMP "+i2 + " TEMP "+ i1 + " 0 ");
      // System.out.println(" RETURN TEMP "+i2 + " END \n");
      E ret = new E();
      ret.tNumber = i2;
      ret.type = "int";
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      Table classTable;
      Table mTable;
      int it = 0;
      int i1 = i++;
      int i2 = i++;
      int i3 = i++;
      int t1 = i++;
      int t2 = i++;
      int t3 = i++;
      E p0 = (E) n.f0.accept(this, argu);
      String cName = (String) p0.type; 
      classTable = (Table) symbolTable.get(cName);
      n.f1.accept(this, argu);
      String mName = (String) n.f2.accept(this, argu);
      mTable = classTable.methodBody.get(mName);



      n.f3.accept(this, argu);
      LinkedList<R> params = (LinkedList<R>)n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      /* IR generation */

      System.out.println(" MOVE TEMP "+t1+" TEMP "+p0.tNumber);
      System.out.println(" MOVE TEMP "+i1+" TEMP "+t1);
      int off = offsetGet(cName, mName, false);
      System.out.println(" HLOAD TEMP "+i2+" TEMP "+ i1 + " 0");
      System.out.println(" HLOAD TEMP "+ i3 + " TEMP  "+i2+" "+off+"\n");

      System.out.print(" MOVE TEMP "+t3+" CALL TEMP "+i3+" ( TEMP "+i1+" ");
      if(params==null){
         System.out.println(" )");
         _ret = (R) findRet( symbolTable.get(cName), mName, null);
         E ret = new E();
         ret.type = (String) _ret;
         ret.tNumber = t3;
         return (R) ret;
      }
      for(it=0;it<params.size();it++){
         E e = (E) params.get(it);
         System.out.print("TEMP "+e.tNumber+" ");
      }
      System.out.println(")");
      LinkedList<R> paramTypes = new LinkedList<R>();
      for(it=0;it<params.size();it++){
         E e = (E) params.get(it);
         paramTypes.add((R)e.type);
      }
      _ret = (R) findRet( symbolTable.get(cName), mName, paramTypes);
      E ret = new E();
      ret.type = (String) _ret;
      ret.tNumber = t3;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      boolean valid = false;
      E p0 = (E) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      E p1 = (E) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      E p2 = (E) n.f4.accept(this, argu);

      String t1 = p1.type;
      String t2 = p2.type;

      String retType = null;
      if(t1.equals(t2)){
         retType = t1;
      }
      else{
            LinkedList<String> trace = new LinkedList<String>();
            Table x=symbolTable.get(t1);
            if(x!=null)trace.add(t1);
            while(x!=null){
                trace.add(x.parent);
                x=symbolTable.get(x.parent);
            }
            Table y=symbolTable.get(t2);
            if(trace.contains(t2)){
               retType = t2;
            }
            else{
                  while(y!=null){
                     if(trace.contains(y.parent)){
                        retType =  y.parent;
                        break;
                     }
                     y=symbolTable.get(y.parent);
                  }
            }
      }
      int r = i++;
      int l1 = label++;
      int l2 = label++;

      // if(p0) then p1 else p2
      System.out.println(" CJUMP TEMP "+p0.tNumber+" L"+l1);
      System.out.println(" MOVE TEMP "+r+" TEMP "+p1.tNumber);
      System.out.println(" JUMP L"+l2);
      System.out.println(" L"+l1+" NOOP ");
      System.out.println("MOVE TEMP "+r+" TEMP "+p2.tNumber);
      System.out.println(" L"+l2 + " NOOP ");

      E ret = new E();
      ret.type = retType;
      ret.tNumber = r;
      return (R) ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      R expr = n.f0.accept(this, argu);
      R lst = n.f1.accept(this, argu);
      if(lst==null){
         lst = (R) new LinkedList<R>(); 
      }
      if(expr!=null){
         ((LinkedList<R>)lst).addFirst(expr);
      }
      return (R) lst;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret = n.f0.accept(this, argu);
      if(n.f0.which==3){
         E e = new E();
         if(lVariables.get((String)_ret)!=null){
            int v = lVariables.get((String)_ret);
            e.tNumber = v;
            e.isTemp = true;
         }
         else{
            /* not present in local variables */
            int off = offsetGet(class_name, (String) _ret, true);
            int i1 = i++;
            System.out.println(" HLOAD TEMP "+ i1 + " TEMP 0 " + off);
            e.tNumber = i1;
            e.isTemp = true;
         }
         e.type = (String) findType((String)_ret, (Table)argu);
         return (R) e;
      }
      if(n.f0.which==4){
         E ret = (E)_ret;
         ret.type = class_name;
         return (R) ret;
      }
      return (R)_ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      E e = new E();
      e.type = (String) n.f0.accept(this, argu);
      int i1 = i++;
      System.out.println(" MOVE TEMP "+i1+" "+e.type);
      e.tNumber = i1;
      return (R) e;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      E e = new E();
      e.type = "boolean";
      int i1 = i++;
      System.out.println(" MOVE TEMP "+i1+" 1 ");
      e.tNumber = i1;
      n.f0.accept(this, argu);
      return (R) e;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      E e = new E();
      e.type = "boolean";
      int i1 = i++;
      System.out.println(" MOVE TEMP "+i1+ " 0 " );
      e.tNumber = i1;
      n.f0.accept(this, argu);
      return (R) e;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      // identifier could be class identifier
      // or a variable 
      String id = (String) n.f0.accept(this, argu);
      return (R) id;
   }

   /**
    * f0 -> " this"
    */
   public R visit(ThisExpression n, A argu) {
      E e = new E();
      e.tNumber = 0;
      n.f0.accept(this, argu);
      // just asssuming Temp 0 points to the parent class
      return (R) e;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      E e = (E) n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      /* IR generation part */
      int i1 = i++;
      int i2 = i++;
      int i3 = i++;
      int i4 = i++; // extra
      int i5 = i++; // extra
      int i6 = i++; // extra

      System.out.println(" MOVE TEMP "+i1+" TEMP "+e.tNumber);
      System.out.println(" MOVE TEMP "+i4+" TIMES TEMP "+i1+" 4 ");
      System.out.println(" MOVE TEMP "+i5+" PLUS TEMP "+i4+"  4 ");
      System.out.println(" MOVE TEMP "+i2+" HALLOCATE TEMP " + i5);

      System.out.println(" HSTORE TEMP "+i2+" 0 TEMP "+i1); // size of array
      System.out.println(" MOVE TEMP " + i3 + " 4");
      System.out.println(" MOVE TEMP "+ i6+ " PLUS TEMP "+i2+" TEMP "+i3);

      System.out.println(" HSTORE TEMP "+i6+" 0 0");
      System.out.println(" MOVE TEMP "+i3+" PLUS TEMP " + i3 + " 4 \n"); // ####
      E ret = new E();
      ret.tNumber = i2; 
      ret.type = "int[]";
      return (R) ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(symbolTable.get(id)==null){
         typeError();
      }

      // ## implement initialize
      //System.out.println(initialize(id) + "RETURN TEMP " + temp+"END\n");

                Table t=symbolTable.get(id); // get the offset table 
                int s1=(t.varOff.size()+1)*4;        // s1 <- size of variables in table t
                int s2=(t.methodOff.size())*4;       // s2 <- size of methods in table t
                int i1 = i++;
                System.out.println("MOVE TEMP "+i1+" HALLOCATE "+s1);
                System.out.println(" MOVE TEMP "+i+" HALLOCATE "+s2);
                Set<String> methods=t.methodOff.keySet();
                for(String m:methods)
                    if(!Pattern.matches(id+"_"+".*", m))
                        System.out.println(" HSTORE TEMP "+i+" "+t.methodOff.get(m)+" "+m);
                for(String m:methods)
                    if(Pattern.matches(id+"_"+".*", m))
                        System.out.println(" HSTORE TEMP "+i+" "+t.methodOff.get(m)+" "+m);
               Set<String> vars=t.varOff.keySet();
               for(String v:vars)
                   System.out.println(" HSTORE TEMP "+(i-1)+" "+t.varOff.get(v)+" 0 ");
               System.out.println(" HSTORE TEMP "+(i-1)+" 0 TEMP "+i);
               int i2 = i-1;
               // temp i-1 
               i++;

      int i3 = i++;
      System.out.println(" MOVE TEMP " +i3+ " TEMP "+i2);
      E ret = new E();
      ret.type = id;
      ret.tNumber = i3;
      return (R) ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      // not exression only to booleans, fls->0, tru->1, 1-that gives the complement
      R _ret=null;
      n.f0.accept(this, argu);
      E e = (E) n.f1.accept(this, argu);
      int i1 = i++;
      System.out.println(" MOVE TEMP "+i1+ " MINUS 1 TEMP "+e.tNumber);
      E ret = new E();
      ret.type = "boolean";
      ret.tNumber = i1;
      return (R) ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      E e = (E) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) e;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   
   public R visit(IdentifierList n, A argu) {
      R _ret=null;

      String f = (String) n.f0.accept(this, argu);
      LinkedList<R> lst = (LinkedList<R>) n.f1.accept(this, argu);
      lst.addFirst((R) f);
      return  (R) lst;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      return (R) id;
   }

}
