//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   Integer stmtcount;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
       if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      stmtcount = 0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) { // ###
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      stmtcount++;
      use.put(stmtcount,new HashSet<Integer>());
      def.put(stmtcount,new HashSet<Integer>());
      n.f0.accept(this, (A) stmtcount);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> useSet = use.get((Integer)argu);
      R u = n.f1.accept(this, argu);
      useSet.add(Integer.parseInt((String)u));
      String l = (String) n.f2.accept(this, argu);
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      t.add(label.get(l));
      succ.put(stmtcount, t); // may go to the instr that follows or to the label
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R l = n.f1.accept(this, argu);
      Set<Integer> t = new HashSet<Integer> ();
      t.add(label.get((String)l));
      succ.put(stmtcount, t); // label is the next instruction
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      Set<Integer> useSet = use.get((Integer)argu);
      n.f0.accept(this, argu);
      R u1 = n.f1.accept(this, argu);
      useSet.add(Integer.parseInt((String)u1));
      n.f2.accept(this, argu);
      R u2 = n.f3.accept(this, argu);
      useSet.add(Integer.parseInt((String)u2));
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      Set<Integer> useSet = use.get((Integer)argu);
      Set<Integer> defSet = def.get((Integer)argu);
      n.f0.accept(this, argu);
      R d = n.f1.accept(this, argu); // definition
      defSet.add(Integer.parseInt((Integer)d));
      R u = n.f2.accept(this, argu); // use
      useSet.add(Integer.parseInt((Integer)u));
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      Set<Integer> defSet = def.get((Integer)argu);
      n.f0.accept(this, argu);
      R t1 = n.f1.accept(this, argu);
      defSet.add(Integer.parseInt((String)t1));
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      Set<Integer> t = new HashSet<Integer> ();
      t.add(stmtcount+1);
      succ.put(stmtcount, t); // next instruction is the only child
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtcount++;
      Set<Integer> t = new HashSet<Integer>();
      t.add(-1);
      succ.put(stmtcount, s1); // this is the last node, no next node
      Set<Integer> useSet=new HashSet<Integer>();
      Set<Integer> defSet=new HashSet<Integer>();
      use.put(stmtcount,useSet);
      def.put(stmtcount,defSet);
      argu = (A) stmtcount;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      LinkedList<R> l = (LinkedList<R>) n.f3.accept(this, argu);
      Set<Integer> useSet = use.get((Integer)argu);
      maxnumcalltemp++; // ##
      if(l != null){
         maxargcalltemp = Math.max(l.size(), maxargcalltemp);
         Iterator<R> it = l.iterator();
         while(it.hasNext()){
            useSet.add(Integer.parseInt((String)it.next()));
         }
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      Set<Integer> useSet = use.get((Integer)argu);
      useSet.add(Integer.parseInt(t));
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(n.f0.which==0){
         Set<Integer> useSet = use.get((Integer) argu);
         useSet.add(Integer.parseInt((String)_ret));
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu); // return the index of the temporary
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

}
