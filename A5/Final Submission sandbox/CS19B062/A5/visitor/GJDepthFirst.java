//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public class argPasser{
      /* what:
         0 -> register
         1 -> Label
         2 -> Integer Literal */
      int what;
      String val;
      argPasser(){
         what = 0;
         val = null;
      }
   };
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         R lbl = n.node.accept(this,argu);
         if(lbl!=null)
            System.out.println((String)lbl+":");
         return (R)lbl;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t.text");
      System.out.println("\t.globl \t main");
      System.out.println("main:");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsw $ra, -4($sp)");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String spilledArgs = (String) n.f5.accept(this, argu);
      Integer i = Integer.parseInt(spilledArgs);
      System.out.println("\tsubu $sp, $sp, "+(2+i)*4);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("\taddu $sp, $sp, "+(2+i)*4);
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\tjal _exitret");
      /* main class ends here */
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println("\t.text");
      System.out.println("\t.globl _halloc");
      System.out.println("_halloc:");
      System.out.println("\tli $v0, 9");
      System.out.println("\tsyscall");
      System.out.println("\tjr $ra\n");
      System.out.println("\t.text ");
      System.out.println("\t.globl _error ");
      System.out.println("_error:");
      System.out.println("\tli $v0, 4");
      System.out.println("\tsyscall");
      System.out.println("\tli $v0, 10");
      System.out.println("\tsyscall\n");
      System.out.println("\t.text ");
      System.out.println("\t.globl _print");
      System.out.println("_print:");
      System.out.println("\tli $v0, 1 ");
      System.out.println("\tsyscall");
      System.out.println("\tla $a0, newline");
      System.out.println("\tli $v0, 4");
      System.out.println("\tsyscall");
      System.out.println("\tjr $ra \n");
      System.out.println("\t.text ");
      System.out.println("\t.globl _exitret");
      System.out.println("_exitret:");
      System.out.println("\tli $v0, 10");
      System.out.println("\tsyscall");
      System.out.println("\t.data");
      System.out.println("\t.align 0");
      System.out.println("\tnewline: 	.asciiz \"\\n\"\n");
      System.out.println("\t.data");
      System.out.println("\t.align 0");
      System.out.println("\terror_msg:	.asciiz \" ERROR : Abnormally terminated!\\n \"");
      
      return _ret;
   }
   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String args = (String) n.f5.accept(this, argu);
      Integer i = Integer.parseInt(args);
      System.out.println("\t.text");
      System.out.println("\t.globl "+label);
      System.out.println(label+":");
      System.out.println("\tsw $fp, -8($sp)");
      System.out.println("\tsw $ra, -4($sp)");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsubu $sp, $sp, "+(2+i)*4);
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("\taddu $sp, $sp, "+(2+i)*4);
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\tlw $fp, -8($fp)");
      System.out.println("\tjr $ra");
      
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tnop");
      
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tjal _error");
      
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String lbl = (String)n.f2.accept(this, argu);
      System.out.println("\tbne $"+reg+", 1, "+lbl);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lbl = (String)n.f1.accept(this, argu);
      System.out.println("\tb "+lbl);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dReg = (String)n.f1.accept(this, argu);
      String off = (String)n.f2.accept(this, argu);
      String sReg = (String)n.f3.accept(this, argu);
      System.out.println("\tsw $"+sReg+", "+off+"($"+dReg+")");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dReg = (String)n.f1.accept(this, argu);
      String sReg = (String)n.f2.accept(this, argu);
      String off = (String)n.f3.accept(this, argu);
      System.out.println("\tlw $"+dReg+", "+off+"($"+sReg+")");
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      argPasser a = new argPasser();
      a.val = reg1;
      a.what = 0;
      n.f2.accept(this, (A)a);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      argPasser a = new argPasser();
      n.f1.accept(this, (A)a);
      if(a.what==0){
         System.out.println("\tmove $a0, $"+a.val);
      }
      else{
         System.out.println("\tli $a0, "+a.val);
      }
      System.out.println("\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String sa = (String)n.f2.accept(this, argu);
      Integer i = Integer.parseInt(sa);
      System.out.println("\tlw $"+reg+", -"+(i+3)*4+"($fp)");
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String sa = (String)n.f1.accept(this, argu);
      Integer i = Integer.parseInt(sa);
      String reg = (String)n.f2.accept(this, argu);
      System.out.println("\tsw $"+reg+", -"+(i+3)*4+"($fp)");
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String sa = (String) n.f1.accept(this, argu);
      String reg = (String) n.f2.accept(this, argu);
      Integer i = Integer.parseInt(sa);
      i -=1;
      System.out.println("\tsw $"+reg+", -"+(i+3)*4+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      argPasser a = new argPasser();
      n.f1.accept(this, (A)a);
      if(a.what == 0)
         System.out.println("\tjalr $"+a.val);
      else if(a.what == 2)
         System.out.println("\tjal "+a.val);
      else
         System.out.println("\tjal _error");
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      argPasser stored = new argPasser();
      stored.val = ((argPasser)argu).val;
      stored.what = ((argPasser)argu).what;
      n.f0.accept(this, argu);

      if(n.f0.which == 2){
         argPasser a = (argPasser) argu;
         if(a.what == 0){
            System.out.println("\tmove $"+stored.val+", $"+a.val);
         }
         else if(a.what == 1){
            System.out.println("\tli $"+stored.val+", "+a.val);
         }
         else{
            System.out.println("\tla $"+stored.val+", "+a.val);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret = null;
      String register = ((argPasser)argu).val;
      n.f0.accept(this, argu);
      argPasser b = new argPasser();
      n.f1.accept(this, (A)b);
      if(b.what == 0){
         System.out.println("\tmove $a0, $"+b.val);
      }
      else if(b.what == 1){
         System.out.println("\tli $v1, "+b.val);
         System.out.println("\tmove $a0, $v1");
      }
      else{
         System.out.println("\tjal _error");
      }
      System.out.println("\tjal _halloc");
      System.out.println("\tmove $"+register+", $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String)n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      argPasser a = new argPasser();
      String dReg = ((argPasser)argu).val;
      n.f2.accept(this, (A)a);

      String r = a.val;
      if(a.what == 1){
         System.out.println("\tli $v1, "+a.val);
         r = "v1";
      }
      if(op=="LE"){
         System.out.println("\tsle $"+dReg+", $"+reg+", $"+r);
      }
      else if(op=="NE"){
         System.out.println("\tsne $"+dReg+", $"+reg+", $"+r);
      }
      else if(op=="PLUS"){
         System.out.println("\tadd $"+dReg+", $"+reg+", $"+r);
      }
      else if(op=="MINUS"){
         System.out.println("\tsub $"+dReg+", $"+reg+", $"+r);
      }
      else if(op=="TIMES"){
         System.out.println("\tmult $"+reg+", $"+r);
         System.out.println("\tmflo $"+dReg);
      }
      else{// op == "div"
         System.out.println("\tdiv $"+reg+", $"+r);
         System.out.println("\tmflo $"+dReg);  
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      argPasser c = (argPasser) argu;
      c.what = n.f0.which;
      c.val = (String) _ret;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
